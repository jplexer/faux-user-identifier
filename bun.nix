# This file was autogenerated by `bun2nix`, editing it is not recommended.
# Consume it with `callPackage` in your actual derivation -> https://nixos-and-flakes.thiscute.world/nixpkgs/callpackage
{
  lib,
  fetchurl,
  runCommand,
  libarchive,
  bun,
  makeWrapper,
  ...
}: let
  # Set of Bun packages to install
  packages = {
    "@types/bun" = {
      out_path = "@types/bun";
      binaries = {
      };
      pkg = fetchurl {
        name = "@types/bun@1.2.4";
        url = "https://registry.npmjs.org/@types/bun/-/bun-1.2.4.tgz";
        hash = "sha256-O01ctlMKEB5nmokJir6UwrPEPWaW9zhiqS0YkwPVX9Y=";
      };
    };
    "@types/node" = {
      out_path = "@types/node";
      binaries = {
      };
      pkg = fetchurl {
        name = "@types/node@22.13.10";
        url = "https://registry.npmjs.org/@types/node/-/node-22.13.10.tgz";
        hash = "sha256-kfvpelaL2E4V/oBZecL0az0YjiKMXlko7ilcsYSGUMk=";
      };
    };
    "@types/ws" = {
      out_path = "@types/ws";
      binaries = {
      };
      pkg = fetchurl {
        name = "@types/ws@8.5.14";
        url = "https://registry.npmjs.org/@types/ws/-/ws-8.5.14.tgz";
        hash = "sha256-SsUn5egoHI/5PcxHQwwtNupaBcwgePqjR3uTG7Ew37w=";
      };
    };
    "bun-types" = {
      out_path = "bun-types";
      binaries = {
      };
      pkg = fetchurl {
        name = "bun-types@1.2.4";
        url = "https://registry.npmjs.org/bun-types/-/bun-types-1.2.4.tgz";
        hash = "sha256-lXqzNu+EFE1bzON4rLGrSdws76vuyStC1Ehxa3n/6/0=";
      };
    };
    "typescript" = {
      out_path = "typescript";
      binaries = {
        "tsc" = "../typescript/bin/tsc";
        "tsserver" = "../typescript/bin/tsserver";
      };
      pkg = fetchurl {
        name = "typescript@5.8.2";
        url = "https://registry.npmjs.org/typescript/-/typescript-5.8.2.tgz";
        hash = "sha256-75OKRTI99XdWZOpdVei8CrICekDbH/hXu5V/57uqRDQ=";
      };
    };
    "undici-types" = {
      out_path = "undici-types";
      binaries = {
      };
      pkg = fetchurl {
        name = "undici-types@6.20.0";
        url = "https://registry.npmjs.org/undici-types/-/undici-types-6.20.0.tgz";
        hash = "sha256-coyp/P9nY3Lk3NZIteJvu9sonsK89nXnYBzCE0pejW4=";
      };
    };
  };

  # Build the node modules directory
  nodeModules = runCommand "node-modules" {
    nativeBuildInputs = [ 
      libarchive 
      makeWrapper
    ];
  } ''
    mkdir -p $out/node_modules/.bin

    # Extract a given package to it's destination
    extract() {
      local pkg=$1
      local dest=$2
      
      mkdir -p "$dest"
      bsdtar --extract \
        --file "$pkg" \
        --directory "$dest" \
        --strip-components=1 \
        --no-same-owner \
        --no-same-permissions

      chmod -R a+X "$dest"
    }

    # Process each package
    ${lib.concatStringsSep "\n" (lib.mapAttrsToList (name: pkg: ''
      echo "Installing package ${name}..."

      mkdir -p "$out/node_modules/${pkg.out_path}"
      extract "${pkg.pkg}" "$out/node_modules/${pkg.out_path}"
      
      # Handle binaries if they exist
      ${lib.concatStringsSep "\n" (lib.mapAttrsToList (binName: binPath: ''
        ln -sf "${binPath}" "$out/node_modules/.bin/${binName}"
      '') pkg.binaries)}
    '') packages)}

    # Force bun instead of node for script execution
    makeWrapper ${bun}/bin/bun $out/bin/node
    export PATH="$out/bin:$PATH"

    patchShebangs $out/node_modules
  '';

in {
  inherit nodeModules packages;
}

